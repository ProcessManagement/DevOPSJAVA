<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:tx="http://www.springframework.org/schema/tx" xsi:schemaLocation="
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">

  <!-- This is needed if you want to use the @Transactional annotation -->
  <tx:annotation-driven transaction-manager="transactionManager" />

  <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource"
    destroy-method="close">
    <property name="jdbcUrl" value="${db.url}" />
    <property name="driverClassName" value="${db.driver}" />
    <property name="username" value="${db.username}" />
    <property name="password" value="${db.password}" />
  </bean>

  <!-- Configure Spring's transaction manager to use a DataSource -->
  <bean id="transactionManager"
    class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource" />
  </bean>

  <!-- Configure jOOQ's ConnectionProvider to use Spring's TransactionAwareDataSourceProxy,
       which can dynamically discover the transaction context -->
  <bean id="transactionAwareDataSource"
    class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
    <constructor-arg ref="dataSource" />
  </bean>

  <bean class="org.jooq.impl.DataSourceConnectionProvider"
    name="connectionProvider">
    <constructor-arg ref="transactionAwareDataSource" />
  </bean>

  <!-- Configure the DSL object, optionally overriding jOOQ Exceptions with Spring Exceptions -->
  <bean id="dsl" class="org.jooq.impl.DefaultDSLContext">
    <constructor-arg ref="config" />
  </bean>

  <!-- Invoking an internal, package-private constructor for the example
       Implement your own Configuration for more reliable behaviour -->
  <bean class="org.jooq.impl.DefaultConfiguration" name="config">
    <property name="SQLDialect">
      <value type="org.jooq.SQLDialect">${db.dialect}</value>
    </property>
    <property name="connectionProvider" ref="connectionProvider" />
  </bean>

  <!-- Migrate on RUN -->
  <bean class="org.flywaydb.core.Flyway" init-method="migrate">
    <property name="dataSource" ref="dataSource" />
    <property name="schemas" value="${db.schema}" />
    <property name="table" value="${db.migrationTable}" />
  </bean>

</beans>
