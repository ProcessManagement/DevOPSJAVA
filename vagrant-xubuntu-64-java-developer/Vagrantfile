# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

unless Vagrant.has_plugin?('vagrant-vbguest')
    raise 'The vagrant-vbguest plugin is missing. To install it run vagrant plugin install vagrant-vbguest'
end

#unless Vagrant.has_plugin?('vagrant-librarian-puppet')
#    raise 'The vagrant-librarian-puppet plugin is missing. To install it run    vagrant plugin install vagrant-librarian-#puppet'
#end

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "trusty64"

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  config.vm.box_url = "https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box"
  #config.vm.box_url = "http://192.168.99.100:8081/artifactory/vagrant-local/trusty-server-cloudimg-amd64-vagrant-disk1.box"

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network :forwarded_port, guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network :private_network, ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network :public_network

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  # config.ssh.forward_agent = true

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:


    config.vm.provider :virtualbox do |vb|
    # Don't boot with headless mode
    vb.gui = true

	# http://www.virtualbox.org/manual/UserManual.html
    # Use VBoxManage to customize the VM. For example to change memory:
    vb.customize [
	  "modifyvm", :id, 
	  "--name", "Xubuntu 14.04 64 Java",
	  "--memory", "4096",
	  "--cpus", "1",
      "--vram", "128"
	] 
  end
  
    
    config.vm.provision "apt-update", :type => "shell", :path => "apt-update.sh"
    
    config.vm.provision "vm-base", :type => "shell", :path => "vm-base.sh"
    
    config.vm.provision "dev-base", :type => "shell", :path => "dev-base.sh"

    config.vm.provision "java-dev", :type => "shell", :path => "java-dev.sh"
    
    #config.vm.provision "puppet-java-dev", :type => "shell", :path => "puppet-java-dev.sh"
    
    config.vm.provision "java-ide", :type => "shell", :path => "java-ide.sh"
    
    config.vm.provision "docker", :type => "shell", :path => "docker.sh"

    config.vm.provision "java-servers", :type => "shell", :path => "java-servers.sh"

    config.vm.provision "test-tools", :type => "shell", :path => "test-tools.sh"

    config.vm.provision "browsers", :type => "shell", :path => "browsers.sh"

    config.vm.provision "utility", :type => "shell", :path => "utility.sh"

    #Provisioning docker using puppet and librarian puppet to manage internal and third parties modules.
    #config.librarian_puppet.puppetfile_dir = "puppet"
       
    #config.vm.provision "puppet" do |puppet|
    #    puppet.options        = '--debug --verbose --summarize --reports store'
    #    puppet.manifests_path = "puppet/manifests"
    #    puppet.module_path = "puppet/modules"
    #end
    
  
end
